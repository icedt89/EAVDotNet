//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JanHafner.EAVDotNet.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JanHafner.EAVDotNet.Properties.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no property found which is specified as key on type &apos;{0}&apos;..
        /// </summary>
        internal static string IdentitfyingPropertyNotFoundExceptionMessage {
            get {
                return ResourceManager.GetString("IdentitfyingPropertyNotFoundExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied IQueryable does not provide an IQueryProvider which implements IDynamicQueryProvider..
        /// </summary>
        internal static string IDynamicQueryProviderNotProvidedExceptionMessage {
            get {
                return ResourceManager.GetString("IDynamicQueryProviderNotProvidedExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hey there :). It seems the query you have provided was not understood and/or correctly translated to a Query-Expression which either compiles or was fully understood by Entity Framework. If you are familiar with Expression trees, translating/rewriting them and IQueryable, please contact me! Otherwise use CreateDataSourceQuery() of IDynamicDbSetAdapter&lt;T&gt; and write a working but more complicated query to retrieve your Objects..
        /// </summary>
        internal static string INeedYourHelpToImproveExceptionMessage {
            get {
                return ResourceManager.GetString("INeedYourHelpToImproveExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; has more than one proprety specified as key..
        /// </summary>
        internal static string MoreThanOneIdentifyingPropertySpecifiedExceptionMessage {
            get {
                return ResourceManager.GetString("MoreThanOneIdentifyingPropertySpecifiedExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only IDynamidDbSetAdapter&lt;T&gt; is supported on inheritors of DynamicDbContextAdapter..
        /// </summary>
        internal static string OnlyDynamicDbSetIsSupportedExceptionMessage {
            get {
                return ResourceManager.GetString("OnlyDynamicDbSetIsSupportedExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The relation between &apos;{0}&apos; and &apos;{1}&apos; is already established. .
        /// </summary>
        internal static string RelationAlreadyPresentExceptionMessage {
            get {
                return ResourceManager.GetString("RelationAlreadyPresentExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied ITypeInstanciationContext {0} was not handled by &apos;{1}&apos;..
        /// </summary>
        internal static string TypeInstanciatorNotHandledExceptionMessage {
            get {
                return ResourceManager.GetString("TypeInstanciatorNotHandledExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InitializedWithType field is not initialized on walker &apos;{0}&apos;..
        /// </summary>
        internal static string TypeWalkerNotInitializedExceptionMessage {
            get {
                return ResourceManager.GetString("TypeWalkerNotInitializedExceptionMessage", resourceCulture);
            }
        }
    }
}
